// Code generated by MockGen. DO NOT EDIT.
// Source: api.go

// Package mockGoxHttp is a generated GoMock package.
package mockGoxHttp

import (
	context "context"
	reflect "reflect"

	command "github.com/devlibx/gox-http/command"
	resty "github.com/go-resty/resty/v2"
	gomock "github.com/golang/mock/gomock"
)

// MockGoxHttpContext is a mock of GoxHttpContext interface.
type MockGoxHttpContext struct {
	ctrl     *gomock.Controller
	recorder *MockGoxHttpContextMockRecorder
}

// MockGoxHttpContextMockRecorder is the mock recorder for MockGoxHttpContext.
type MockGoxHttpContextMockRecorder struct {
	mock *MockGoxHttpContext
}

// NewMockGoxHttpContext creates a new mock instance.
func NewMockGoxHttpContext(ctrl *gomock.Controller) *MockGoxHttpContext {
	mock := &MockGoxHttpContext{ctrl: ctrl}
	mock.recorder = &MockGoxHttpContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGoxHttpContext) EXPECT() *MockGoxHttpContextMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockGoxHttpContext) Execute(ctx context.Context, api string, request *command.GoxRequest) (*command.GoxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, api, request)
	ret0, _ := ret[0].(*command.GoxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockGoxHttpContextMockRecorder) Execute(ctx, api, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockGoxHttpContext)(nil).Execute), ctx, api, request)
}

// ExecuteAsync mocks base method.
func (m *MockGoxHttpContext) ExecuteAsync(ctx context.Context, api string, request *command.GoxRequest) chan *command.GoxResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteAsync", ctx, api, request)
	ret0, _ := ret[0].(chan *command.GoxResponse)
	return ret0
}

// ExecuteAsync indicates an expected call of ExecuteAsync.
func (mr *MockGoxHttpContextMockRecorder) ExecuteAsync(ctx, api, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteAsync", reflect.TypeOf((*MockGoxHttpContext)(nil).ExecuteAsync), ctx, api, request)
}

// ReloadApi mocks base method.
func (m *MockGoxHttpContext) ReloadApi(apiToReload string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadApi", apiToReload)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadApi indicates an expected call of ReloadApi.
func (mr *MockGoxHttpContextMockRecorder) ReloadApi(apiToReload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadApi", reflect.TypeOf((*MockGoxHttpContext)(nil).ReloadApi), apiToReload)
}

// MockRestyClientProvider is a mock of RestyClientProvider interface.
type MockRestyClientProvider struct {
	ctrl     *gomock.Controller
	recorder *MockRestyClientProviderMockRecorder
}

// MockRestyClientProviderMockRecorder is the mock recorder for MockRestyClientProvider.
type MockRestyClientProviderMockRecorder struct {
	mock *MockRestyClientProvider
}

// NewMockRestyClientProvider creates a new mock instance.
func NewMockRestyClientProvider(ctrl *gomock.Controller) *MockRestyClientProvider {
	mock := &MockRestyClientProvider{ctrl: ctrl}
	mock.recorder = &MockRestyClientProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRestyClientProvider) EXPECT() *MockRestyClientProviderMockRecorder {
	return m.recorder
}

// GetRestyClient mocks base method.
func (m *MockRestyClientProvider) GetRestyClient(api string) (*resty.Client, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRestyClient", api)
	ret0, _ := ret[0].(*resty.Client)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetRestyClient indicates an expected call of GetRestyClient.
func (mr *MockRestyClientProviderMockRecorder) GetRestyClient(api interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestyClient", reflect.TypeOf((*MockRestyClientProvider)(nil).GetRestyClient), api)
}
