// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mockGoxHttp is a generated GoMock package.
package mockGoxHttp

import (
	context "context"
	reflect "reflect"

	command "github.com/devlibx/gox-http/v4/command"
	gomock "github.com/golang/mock/gomock"
)

// MockBodyProvider is a mock of BodyProvider interface.
type MockBodyProvider struct {
	ctrl     *gomock.Controller
	recorder *MockBodyProviderMockRecorder
}

// MockBodyProviderMockRecorder is the mock recorder for MockBodyProvider.
type MockBodyProviderMockRecorder struct {
	mock *MockBodyProvider
}

// NewMockBodyProvider creates a new mock instance.
func NewMockBodyProvider(ctrl *gomock.Controller) *MockBodyProvider {
	mock := &MockBodyProvider{ctrl: ctrl}
	mock.recorder = &MockBodyProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBodyProvider) EXPECT() *MockBodyProviderMockRecorder {
	return m.recorder
}

// Body mocks base method.
func (m *MockBodyProvider) Body(object interface{}) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Body", object)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Body indicates an expected call of Body.
func (mr *MockBodyProviderMockRecorder) Body(object interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Body", reflect.TypeOf((*MockBodyProvider)(nil).Body), object)
}

// MockResponseBuilder is a mock of ResponseBuilder interface.
type MockResponseBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockResponseBuilderMockRecorder
}

// MockResponseBuilderMockRecorder is the mock recorder for MockResponseBuilder.
type MockResponseBuilderMockRecorder struct {
	mock *MockResponseBuilder
}

// NewMockResponseBuilder creates a new mock instance.
func NewMockResponseBuilder(ctrl *gomock.Controller) *MockResponseBuilder {
	mock := &MockResponseBuilder{ctrl: ctrl}
	mock.recorder = &MockResponseBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResponseBuilder) EXPECT() *MockResponseBuilderMockRecorder {
	return m.recorder
}

// Response mocks base method.
func (m *MockResponseBuilder) Response(data []byte) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Response", data)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Response indicates an expected call of Response.
func (mr *MockResponseBuilderMockRecorder) Response(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Response", reflect.TypeOf((*MockResponseBuilder)(nil).Response), data)
}

// MockCommand is a mock of Command interface.
type MockCommand struct {
	ctrl     *gomock.Controller
	recorder *MockCommandMockRecorder
}

// MockCommandMockRecorder is the mock recorder for MockCommand.
type MockCommandMockRecorder struct {
	mock *MockCommand
}

// NewMockCommand creates a new mock instance.
func NewMockCommand(ctrl *gomock.Controller) *MockCommand {
	mock := &MockCommand{ctrl: ctrl}
	mock.recorder = &MockCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommand) EXPECT() *MockCommandMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockCommand) Execute(ctx context.Context, request *command.GoxRequest) (*command.GoxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, request)
	ret0, _ := ret[0].(*command.GoxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockCommandMockRecorder) Execute(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCommand)(nil).Execute), ctx, request)
}
